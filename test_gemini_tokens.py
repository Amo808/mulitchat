#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from adapters.gemini_provider import GeminiAdapter
from adapters.base_provider import ProviderConfig, GenerationParams, Message, ModelProvider

async def test_gemini_token_counting():
    """–¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è Gemini"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ Gemini...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç)
    class TestConfig:
        def __init__(self):
            self.id = ModelProvider.GEMINI
            self.name = "gemini"
            self.enabled = True
            self.api_key = os.getenv("GEMINI_API_KEY", "test-key")
            self.base_url = "https://generativelanguage.googleapis.com"
    
    config = TestConfig()
    
    gemini = GeminiAdapter(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_texts = [
        "Hello, world!",
        "Explain quantum computing in simple terms.",
        "Write a detailed analysis of machine learning algorithms including supervised, unsupervised, and reinforcement learning approaches. Discuss their applications, advantages, and limitations in modern AI systems.",
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞—Å—Å–∫–∞–∂–∏ –æ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    ]
    
    models_to_test = [
        "gemini-2.5-pro",
        "gemini-2.5-flash", 
        "gemini-2.5-flash-lite",
        "gemini-2.0-flash",
        "gemini-1.5-pro",
        "gemini-1.5-flash"
    ]
    
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é tiktoken...")
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n--- –¢–µ—Å—Ç {i} ---")
        print(f"–¢–µ–∫—Å—Ç: {text[:50]}{'...' if len(text) > 50 else ''}")
        
        # Tiktoken –ø–æ–¥—Å—á–µ—Ç
        tokens_tiktoken = gemini.estimate_tokens_accurate(text)
        print(f"–¢–æ–∫–µ–Ω—ã (tiktoken): {tokens_tiktoken}")
        
        # –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        tokens_old = gemini.estimate_tokens(text)
        print(f"–¢–æ–∫–µ–Ω—ã (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥): {tokens_old}")
        
        print(f"–†–∞–∑–Ω–∏—Ü–∞: {abs(tokens_tiktoken - tokens_old)} —Ç–æ–∫–µ–Ω–æ–≤")
    
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    input_tokens = 100
    output_tokens = 200
    
    print(f"\n–ü—Ä–∏ {input_tokens} –≤—Ö–æ–¥—è—â–∏—Ö –∏ {output_tokens} –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö:")
    
    for model in models_to_test:
        cost = gemini._calculate_cost(model, input_tokens, output_tokens)
        print(f"{model}: ${cost:.6f}")
    
    print("\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π (1000 –≤—Ö–æ–¥—è—â–∏—Ö + 1000 –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤):")
    
    for model in models_to_test:
        cost = gemini._calculate_cost(model, 1000, 1000)
        pricing = gemini.MODEL_PRICING[model]
        print(f"{model}:")
        print(f"  –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}")
        print(f"  –¶–µ–Ω–∞ –∑–∞ 1M –≤—Ö–æ–¥—è—â–∏—Ö: ${pricing['input_tokens']:.3f}")
        print(f"  –¶–µ–Ω–∞ –∑–∞ 1M –∏—Å—Ö–æ–¥—è—â–∏—Ö: ${pricing['output_tokens']:.3f}")
    
    # –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º API (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
    if os.getenv("GEMINI_API_KEY"):
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤...")
        try:
            test_text = "Explain artificial intelligence in one paragraph."
            api_tokens = await gemini.count_tokens_api(test_text, "gemini-2.5-flash")
            tiktoken_tokens = gemini.estimate_tokens_accurate(test_text)
            
            print(f"–¢–µ–∫—Å—Ç: {test_text}")
            print(f"API —Ç–æ–∫–µ–Ω—ã: {api_tokens}")
            print(f"Tiktoken —Ç–æ–∫–µ–Ω—ã: {tiktoken_tokens}")
            print(f"–†–∞–∑–Ω–∏—Ü–∞: {abs(api_tokens - tiktoken_tokens)} —Ç–æ–∫–µ–Ω–æ–≤")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞: {e}")
    else:
        print("\n‚ö†Ô∏è  GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º API —Ç–µ—Å—Ç")
    
    await gemini.close()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –†–µ–∑—é–º–µ:")
    print("- Tiktoken –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
    print("- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ Gemini –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    print("- –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("- API –ø–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–∞")

if __name__ == "__main__":
    asyncio.run(test_gemini_token_counting())
